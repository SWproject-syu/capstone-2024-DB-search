import styles from "@/styles/Home.module.css";
import { Inter } from "next/font/google";
import Head from "next/head";
import { ChangeEventHandler, useCallback, useState } from "react";
import { debounce } from "lodash";
import axios from "axios";
import { MY_BRANCH } from "./api/common";
const inter = Inter({ subsets: ["latin"] });

type ResponseType = {
  _index: string; //"healthsupplement",
  _type: string; //"_doc",
  _id: string; //"d340o44BXoPQouNCWZAR",
  _score: number; // 1,
  _source: { [key: string]: string };
}[];

export default function Home() {
  //입력창에 글자 있는지 여부
  const [isInput, setIsInput] = useState(false);
  const [isLoading, setLoading] = useState(true);
  //검색결과
  const [searchDataList, setSearchDataList] = useState<ResponseType>([]);

  const fetchSearchResults = async (query: string) => {
    setLoading(true);
    setSearchDataList([]);
    try {
      /**
       * @sample 사용가능 API
       *
       * @건강기능식품1 /api/healthsupplement/search/searchByName
       *  @기능 앞글자부터 정확하게 검색하기
       * @건강기능식품2 /api/healthsupplement/search/searchByAll
       *  @기능 여러 프로퍼티(=칼럼, 브랜드/제품명/주성분 중 1개라도 있는것) 검색하기
       *
       * @전국캠핑장1 /api/campsite/search/searchByCampsiteName
       *  @기능 검색어가 포함된 결과 찾기
       * @전국캠핑장2 /api/campsite/search/searchByDescription
       *  @기능 문장으로 검색하기
       *
       * @대한민국주소검색1 /api/address/search/searchByRoadaddress
       *  @기능1 도로명 검색: 시도+시구군+읍면+도로명+건물번호본번+"-"+건물번호부번
       *  @기능2 여러 프로퍼티(=칼럼) 통합 검색 + 여러 필드에서 최상의 매칭을 찾음(best_fields) + 오타에 유연하게 대응(fuzziness)
       * @대한민국주소검색2 /api/address/search/searchByJibunaddress
       *  @기능1 지번 검색: 시도+시구군+읍면+법정동명+리명+지번본번+"-"+지번부번(0제외)
       *  @기능2 여러 프로퍼티(=칼럼) 통합 검색 + 여러 필드에서 최상의 매칭을 찾음(best_fields) + 오타에 유연하게 대응(fuzziness)
       *  @기능3 앞쪽 글자에 매칭할수록 가중치 적용
       */
      const data = await axios.get<{ data: any[] }>(`/api/address/search/searchByJibunaddress?query=${query}`);
      setSearchDataList(data.data.data);
    } catch (e) {
      console.error("Error fetching search results:", e);
    } finally {
      setLoading(false);
    }
  };

  // debounce the fetchSearchResults function
  const debouncedFetchSearchResults = useCallback(debounce(fetchSearchResults, 300), []);

  const onChangeText: ChangeEventHandler<HTMLInputElement> = ({ target: { value } }) => {
    setIsInput(value.length > 0);
    if (value.trim()) {
      debouncedFetchSearchResults(value);
    } else {
      setSearchDataList([]);
    }
  };

  console.log("searchDataList", searchDataList);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`} style={{ paddingTop: isInput ? "10vh" : undefined }}>
        <div
          className={`${styles.description} ${!isInput ? styles["description-active"] : ""}`}
          style={{ justifyContent: "space-between" }}
        >
          <p>검색어를 입력하여 검색해보세요. !!! [현재 검색 index: {MY_BRANCH}]</p>
          <div>
            <a href="https://www.syu.ac.kr/cse/" target="_blank" rel="noopener noreferrer">
              By{" "}
              <img
                src="https://www.syu.ac.kr/cse/wp-content/themes/syu-hakbu/images/logo/logo_w.png"
                alt="logo"
                width={100}
                height={24}
              />
              컴퓨터공학부
            </a>
          </div>
        </div>
        <div
          className={styles.center}
          style={{ display: "flex", paddingTop: isInput ? 0 : "25vh", transition: "all 1s ease-out" }}
        >
          <input
            placeholder="검색어를 입력하세요"
            style={{ fontSize: 40, padding: 8, position: "absolute", zIndex: 1, maxWidth: "80vw" }}
            onChange={onChangeText}
          />
        </div>

        {isInput && (
          <div
            className={styles.grid}
            style={{
              display: "flex",
              flexDirection: "column",
              backgroundColor: " rgba(var(--callout-rgb), 0.5)",
              border: "1px solid rgba(63, 119, 147, 0.3)",
              borderRadius: "var(--border-radius)",
              padding: 12,
              maxHeight: "70vh",
              overflowY: "scroll",
            }}
          >
            {isLoading ? (
              <div>불러오는 중입니다...</div>
            ) : searchDataList.length === 0 ? (
              <div>검색결과가 없습니다.</div>
            ) : (
              searchDataList.map((i) => (
                <div key={i._id}>
                  추천점수: {i._score}
                  <br />
                  {Object.entries(i._source).map(([key, value]) => (
                    <div key={key}>
                      {key}: {value}
                      <br />
                    </div>
                  ))}
                  <div style={{ margin: 8, height: 4, width: "100%", background: "gray" }} />
                </div>
              ))
            )}
          </div>
        )}
      </main>
    </>
  );
}
